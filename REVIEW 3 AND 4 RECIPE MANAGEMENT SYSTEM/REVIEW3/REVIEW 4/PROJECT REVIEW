1. Creating the New Project with JDK & IDE Setup
A. JDK & IDE Setup
JDK: The project is developed using JDK 11 or higher.
IDE: You can use IntelliJ IDEA, Eclipse, or NetBeans for development.
Maven: The project is managed using Maven, a build automation tool that simplifies dependency management, build, and deployment.
Install JDK 11 from Oracle.
Set up Maven on your system by downloading it from Maven's official site.
Open your IDE and create a new Maven Project. Follow the steps to set up the group and artifact IDs for your project.
2. Define the Project Structure
The project follows a Model-View-Controller (MVC) architecture and is structured as follows:

bash
Copy code
recipe-management-system
│
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   ├── com/
│   │   │   │   └── recipe/
│   │   │   │       ├── dao/
│   │   │   │       │   └── RecipeDAO.java
│   │   │   │       ├── model/
│   │   │   │       │   └── Recipe.java
│   │   │   │       ├── servlet/
│   │   │   │       │   └── RecipeServlet.java
│   │   │   │       ├── service/
│   │   │   │       │   └── RecipeService.java
│   │   │   │       └── util/
│   │   │   │           └── DatabaseUtil.java
│   │   └── resources/
│   │       └── application.properties
│   ├── webapp/
│   │   ├── WEB-INF/
│   │   │   ├── web.xml
│   │   ├── index.jsp
│   │   ├── register.jsp
│   │   └── recipes.jsp
│   └── test/
│       ├── java/
│       │   └── com/recipe/
│       │       └── service/
│       │           └── RecipeServiceTest.java
│       └── resources/
└── pom.xml
3. Design the Database Schema for the Project
The database schema for the Recipe Management System contains two tables: users and recipes.

MySQL Table Design
Users Table: This table stores user data, including their registration details.

sql
Copy code
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL
);
Recipes Table: This table stores recipes added by users.

sql
Copy code
CREATE TABLE recipes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    ingredients TEXT NOT NULL,
    instructions TEXT NOT NULL,
    user_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
4. Review 1: Create a MySQL Table and Implement JDBC for Database Connectivity
A. Implement JDBC for Database Connectivity
JDBC Connection: Use DriverManager.getConnection() to connect to the database.

DatabaseUtil.java:

java
Copy code
package com.recipe.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseUtil {
    private static final String URL = "jdbc:mysql://localhost:3306/recipe_db";
    private static final String USER = "root";
    private static final String PASSWORD = "password";

    public static Connection getConnection() throws SQLException {
        try {
            return DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (SQLException e) {
            throw new SQLException("Database connection failed.", e);
        }
    }
}
DAO Implementation: RecipeDAO for interacting with the recipes table.

RecipeDAO.java:

java
Copy code
package com.recipe.dao;

import com.recipe.model.Recipe;
import com.recipe.util.DatabaseUtil;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class RecipeDAO {
    public List<Recipe> getAllRecipes() {
        List<Recipe> recipes = new ArrayList<>();
        String query = "SELECT * FROM recipes";
        try (Connection connection = DatabaseUtil.getConnection();
             Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            while (rs.next()) {
                Recipe recipe = new Recipe(rs.getInt("id"),
                                           rs.getString("title"),
                                           rs.getString("ingredients"),
                                           rs.getString("instructions"),
                                           rs.getInt("user_id"));
                recipes.add(recipe);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return recipes;
    }

    public boolean addRecipe(Recipe recipe) {
        String query = "INSERT INTO recipes (title, ingredients, instructions, user_id) VALUES (?, ?, ?, ?)";
        try (Connection connection = DatabaseUtil.getConnection();
             PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, recipe.getTitle());
            stmt.setString(2, recipe.getIngredients());
            stmt.setString(3, recipe.getInstructions());
            stmt.setInt(4, recipe.getUserId());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
}
5. Review 2: Design HTML Templates and Style with CSS & Bootstrap
A. Design HTML Templates
Register Page (register.jsp):

html
Copy code
<form action="register" method="post">
    <input type="text" name="username" placeholder="Username" required />
    <input type="password" name="password" placeholder="Password" required />
    <input type="email" name="email" placeholder="Email" required />
    <button type="submit">Register</button>
</form>
Recipes Page (recipes.jsp):

html
Copy code
<h1>Recipes</h1>
<table>
    <tr>
        <th>Title</th>
        <th>Ingredients</th>
        <th>Instructions</th>
    </tr>
    <c:forEach var="recipe" items="${recipes}">
        <tr>
            <td>${recipe.title}</td>
            <td>${recipe.ingredients}</td>
            <td>${recipe.instructions}</td>
        </tr>
    </c:forEach>
</table>
B. Style with CSS & Bootstrap
CSS for styling:

css
Copy code
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
}

form {
    margin: 20px;
    padding: 20px;
    background-color: white;
    border-radius: 8px;
}

button {
    background-color: #4CAF50;
    color: white;
}
Bootstrap integration: Add Bootstrap CDN to index.jsp.

html
Copy code
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
6. Review 3: Implement Servlets and JSP Integration
A. Create and Configure Servlets
RecipeServlet.java for handling user registration and recipe display:
java
Copy code
@WebServlet("/register")
public class RecipeServlet extends HttpServlet {
    private RecipeDAO recipeDAO = new RecipeDAO();

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        List<Recipe> recipes = recipeDAO.getAllRecipes();
        request.setAttribute("recipes", recipes);
        request.getRequestDispatcher("/recipes.jsp").forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String title = request.getParameter("title");
        String ingredients = request.getParameter("ingredients");
        String instructions = request.getParameter("instructions");
        Recipe recipe = new Recipe(title, ingredients, instructions, 1);
        recipeDAO.addRecipe(recipe);
        response.sendRedirect("recipes.jsp");
    }
}
B. Integrate JSP with Servlets
The RecipeServlet forwards data to recipes.jsp where the recipes are displayed using JSTL.

7. Unit Tests for DAO and Service Layer
A. RecipeDAO Unit Test
Using Mockito to mock database interactions.

java
Copy code
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class RecipeDAOTest {

    private RecipeDAO recipeDAO;

    @BeforeEach
    public void setUp() {
        recipeDAO = mock(RecipeDAO.class);
    }

    @Test
    public void testGetAllRecipes() {
        List<Recipe> recipes = new ArrayList<>();
        recipes.add(new Recipe("Spaghetti", "Spaghetti, Tomato", "Boil pasta, make sauce", 1));
        when(recipeDAO.getAllRecipes()).thenReturn(recipes);

        List<Recipe> result = recipeDAO.getAllRecipes();
        assertEquals(1, result.size(), "There should be one recipe");
    }
}
8. Final Project Review
A. Code Quality
Clean and modular code, following best practices.
Proper use of DAO for data access and Service layer for business logic.
B. Error Handling
Proper exception handling for database errors and missing data.
C. Validation
Form Validation using JavaScript and Server-side Validation using Java for fields like username, email, and recipe details.
D. Documentation
Clear README.md explaining setup, configuration, and running instructions.
In-code comments and Javadoc for methods and classes.